<!DOCTYPE html>
<html lang="en">

<%- include('../partials/head.ejs', {page: user.name, vue: true, vueIconifyIcons: {heart: "uil/heart"}, profile:true, username:user.name}); %>


<body class='bg-gray-100'>
    <%- include('../partials/nav.ejs', {active: "user_"+user.name, user:loggedInUser, loggedIn}); %>
    <div id='data' class='hidden'>
        <% if(loggedIn){ %>
        <input type="hidden" id="loggedInUserID" value="<%= loggedInUser._id %>">
        <% } %>
        <input type="hidden" id="userName" value="<%= user.name %>">
    </div>
    <main class='container mx-auto px-4 mt-24 md:mt-16' id='app' v-cloak>
        <img src="/picture/<%= user.name %>" height="30px" class='rounded-full h-10 inline-block shadow'>
        <h1 class="text-base">@<%= user.name %></h1>
        <% if(loggedInUser) { %>
        <button data-user='<%= user.name %>' id='follow'
            class="group relative inline-block py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white <%= user.followers.includes(loggedInUser._id.toString())? 'bg-gray-600 hover:bg-gray-500' : 'bg-indigo-600 hover:bg-indigo-500' %> transition duration-150 ease-in-out">
            <span class="iconify inline-block mr-1" data-icon="uil:user-plus" data-inline="true"></span>
            <span class='inline-block'
                id='follow-text'><%= user.followers.includes(loggedInUser._id.toString())? 'Unfollow' : 'Follow' %></span>
        </button>
        <% } %>
        <p class="text-gray-700"><a href='#'><span id='follower-count'><%= user.followers ? user.followers.length.toString() : '0' %></span> followers</a> | <a href='#'><span id='following-count'><%= user.following ? user.following.length.toString() : '0' %></span> following</a></p> <!-- todo: make api also find who the user is following -->
        <p class="text-gray-700 italic">id: <%= user._id %></p>
        <post v-for="post in posts" v-bind:key="post._id" v-bind:post="post" v-bind:logged-in-user-id="loggedInUserID"></post>
        <button v-if='!last' @click="loadMore()" href="/login"
            class="max-w-2xl w-full mx-auto flex items-center justify-center mb-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 md:text-lg transition duration-150 ease-in-out">
            Load more
        </button>                        
    </main>
</body>

<%- include('../partials/scripts.ejs'); %>
<script type="module"> <!-- needs to be type module otherwise we can't use import/export statement -->
  import Post from "../assets/js/components/post.js";
    console.log('user script loaded')
    var user = document.getElementById('userName').value //TODO: is there a better way to do this? TODO: clean this the heck up
    var userInput = document.getElementById('loggedInUserID')

    const urlParams = new URLSearchParams(window.location.search);
    const onePost = urlParams.get('post');

    if (userInput) var loggedInUserID = userInput.value;
    var app = new Vue({
        el: '#app',
        components: {
          Post // this is much cleaner than doing Vue.component(...)
        },
        data: {
            page: 1,
            last: false,
            posts: [],
            loggedInUserID,
            user
        },
        async mounted() {
            if (onePost) {
                console.log('loading one post')
                this.page = 0
                var res = await fetch(`/api/posts/${onePost}`)
                var data = await res.json()
                data.highlight = true
                Vue.set(this.posts, 0, data)
            } else {
                console.log('loading all posts')
                var res = await fetch(`/api/users/${user}/posts`)
                var data = await res.json()
                this.posts = data.posts
                this.last = data.last
            }
        },
        methods: {
            loadMore: async function () {
                if (this.page == 0) {
                    var newURL = location.href.split("?")[0];
                    window.history.pushState('object', document.title, newURL);
                    this.posts = [] //remove all posts if the page was 0, because that means it was a specific post
                }
                this.page++
                var res = await fetch(`/api/users/${user}/posts?page=${this.page}`)
                var data = await res.json()
                this.posts = data.posts = this.posts.concat(data.posts)
                this.last = data.last
            },
          lovePost: async function (id) {
                love(id, (newLoves, action) => {
                    // add _id to post loves array client side, so that it update v-bind:key="post._id"
                    var post = this.posts.find(i => i._id == id)
                    if (post) {
                        post.loves = newLoves
                    }
                })
            }
        }
    })

    var followButton = document.querySelector('#follow')

    if (followButton) {
        followButton.addEventListener('click', e => {
            follow(followButton.dataset.user)
        })
    }

    async function follow(user) {
        console.log(`gonna follow ${user}`)
        var followres = await fetch(`/users/${user}/follow`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        var followjson = await followres.json()
        console.log(followjson)
        if (followjson.ok) {
            document.getElementById('follower-count').innerText = followjson.followers.toString() || 'error'
            document.getElementById('following-count').innerText = followjson.following.toString() || 'error'
            if (followjson.action == 'follow') {
                document.getElementById('follow-text').innerText = `Unfollow`
                followButton.classList.remove('bg-indigo-600', 'hover:bg-indigo-500')
                followButton.classList.add('bg-gray-600', 'hover:bg-gray-500')
            }
            if (followjson.action == 'unfollow') {
                document.getElementById('follow-text').innerText = `Follow`
                followButton.classList.remove('bg-gray-600', 'hover:bg-gray-500')
                followButton.classList.add('bg-indigo-600', 'hover:bg-indigo-500')
            }
        }
        if (followjson.error) {
            Swal.fire({
                icon: 'error',
                title: 'Failed to follow',
                text: followjson.error,
                footer: '<a href="https://github.com/jeffalo/wasteof.money/issues">Report issues</a>'
            })
        }
    }
  
  async function love(id, callback) {
        console.log(`loving ${id}`)
        var loveres = await fetch(`/posts/${id}/love`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        var lovejson = await loveres.json()
        console.log(lovejson)
        if (lovejson.ok) {
            var action = lovejson.action
            var newCount = lovejson.loves
            if (action == 'love') callback(newCount, 'love')
            if (action == 'unlove') callback(newCount, 'unlove')
        }
        if (lovejson.error) {
            Swal.fire({
                icon: 'error',
                title: 'Failed to love',
                text: lovejson.error,
                footer: '<a href="https://github.com/jeffalo/wasteof.money/issues">Report issues</a>'
            })
        }
    }
</script>

</html>
